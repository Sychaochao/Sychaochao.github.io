<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>promise使用</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>new promise</p><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1816792526,903377191&fm=26&gp=0.jpg"></p><h2 id="promise语法（1）"><a href="#promise语法（1）" class="headerlink" title="promise语法（1）"></a>promise语法（1）</h2><pre class=" language-js"><code class="language-js"><span class="token operator">*</span><span class="token comment" spellcheck="true">// 1 重要语法*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">// Promise(excutor)构造函数*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">//Promise.prototype.then()方法*</span> <span class="token comment" spellcheck="true">//     1 创建 promise 对象</span>        <span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//执行器函数  同步</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//     2 执行器函数中写异步代码</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>   <span class="token comment" spellcheck="true">//     3 给promise指定成功或者失败的回调函数   用于获取成功的value 或失败的 reason</span>            value <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>            reason <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span>      <span class="token punctuation">)</span></code></pre><h2 id="Promise基础流程（2）"><a href="#Promise基础流程（2）" class="headerlink" title="Promise基础流程（2）"></a>Promise基础流程（2）</h2><pre class=" language-js"><code class="language-js">    <span class="token operator">*</span><span class="token comment" spellcheck="true">// 2 基本编码流程*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">//1） 创建promise对象 （pending 状态） 指定执行器函数*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">//2） 在执行器函数中开启异步任务* </span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">//3） 根据结果做不同的处理*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">//成功 调用 resolve（） 指定成功的value 变为 resolved状态*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">// 失败 调用 reject（） 指定失败的reason 变为rejected 状态*</span></code></pre><h2 id="Promise状态（3）"><a href="#Promise状态（3）" class="headerlink" title="Promise状态（3）"></a>Promise状态（3）</h2><pre class=" language-js"><code class="language-js">    <span class="token operator">*</span><span class="token comment" spellcheck="true">// 3 Promise 对象的状态*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">// pending 未确定 初始化的状态*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">// resolved 解决/成功的 调用resolve（）后的状态*</span>        <span class="token comment" spellcheck="true">//fulfilled  同resolved</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">// rejected 拒绝/失败的 调用reject（）后的状态*</span>​     <span class="token operator">*</span><span class="token comment" spellcheck="true">//总结：状态只能改一次 pending ==> resolved pending ==> rejected*</span></code></pre><h2 id="Promise方法（4）"><a href="#Promise方法（4）" class="headerlink" title="Promise方法（4）"></a>Promise方法（4）</h2><pre class=" language-diff"><code class="language-diff"><span class="token inserted">+​     //promise.prototype.then方法(onResolved,[onRejected])=>&amp;#123;&amp;#125;</span> ​      //  第二个参数带数组说明是可选参数          then()     语法糖 相当于 then(undefined,onRejected) ​      //  onResolved函数：成功的回调函数（value）=>&amp;#123;&amp;#125; ​      //  onRejected:        失败的回调函数（reason）=> &amp;#123;&amp;#125; ​      //  指定用于得到成功的value的成功的回调和用于得到失败的reason的回掉   ​      //  返回一个新的Promise 实例对象<span class="token inserted">+​   //promise.prototype.catch方法(onRejected)=>&amp;#123;&amp;#125;</span> ​      // onRejected 失败的回调函数（reason）=>&amp;#123;&amp;#125;<span class="token inserted">+​    //promise.all方法（promises）=>&amp;#123;&amp;#125;</span>        //promises 包含N个promise的数组 返回一个新的promise，         //只有所有的promies都成功才成功 只要有一个失败就直接失败<span class="token inserted">+​   //promise.race方法（promises）=>&amp;#123;&amp;#125;</span>         //promises 包含N个promise的数组 返回一个新的promise，         // 第一个完成的promise的结果状态就算最终的结果状态</code></pre><p>总结：</p><pre><code>         all ()     都成功状态 才会成功 一个失败直接失败        race()     第一个完成的状态就算最终结果状态</code></pre><img src="C:\Users\86187\AppData\Roaming\Typora\typora-user-images\image-20201014133505896.png" alt="image-20201014133505896" style="zoom:80%;" /><h2 id="async-和await-修饰符"><a href="#async-和await-修饰符" class="headerlink" title="async 和await 修饰符"></a>async 和await 修饰符</h2><p>处理异步 终极解决方案</p><p>async 函数</p><pre><code>只要声明async 就会返回一个   Promise对象结果由 async函数执行的返回值决定</code></pre><p>await 表达式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//* await表达式右侧一般为promise对象，也可以是其他值 </span><span class="token comment" spellcheck="true">//* 如果await是Promise对象 返回的是成功的值</span><span class="token comment" spellcheck="true">//* 如果表达式是其他的值 直接将此值作为await的返回值</span><span class="token comment" spellcheck="true">//* let str = await 9  //返回9 </span></code></pre><p><strong>注意：</strong></p><p>await 必须写在async 函数中 </p><p>如果await 的pormise失败了 就会抛出异常 需要通过try …catch 来捕获处理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
